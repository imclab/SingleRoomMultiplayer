/* Shader-Particles 0.3.0
 * 
 * (c) 2013 Luke Moody (http://www.github.com/squarefeet) & Lee Stemkoski (http://www.adelphi.edu/~stemkoski/)
 *     Based on Lee Stemkoski's original work (https://github.com/stemkoski/stemkoski.github.com/blob/master/Three.js/js/ParticleEngine.js).
 *
 * Shader-Particles may be freely distributed under the MIT license (See LICENSE.txt at root of this repository.)
 */
function ShaderParticleGroup(a){this.fixedTimeStep=parseFloat(a.fixedTimeStep||.016,10),this.maxAge=parseFloat(a.maxAge||3),this.texture=("string"==typeof a.texture?ASSET_LOADER.loaded.textures[a.texture]:a.texture)||null,this.hasPerspective=parseInt("number"==typeof a.hasPerspective?a.hasPerspective:1),this.colorize=parseInt(a.colorize||1),this.blending="number"==typeof a.blending?a.blending:THREE.AdditiveBlending,this.transparent=a.transparent||!0,this.alphaTest=a.alphaTest||.5,this.depthWrite=a.depthWrite||!1,this.depthTest=a.depthTest||!0,this.uniforms={duration:{type:"f",value:this.maxAge},texture:{type:"t",value:this.texture},hasPerspective:{type:"i",value:this.hasPerspective},colorize:{type:"i",value:this.colorize}},this.attributes={acceleration:{type:"v3",value:[]},velocity:{type:"v3",value:[]},alive:{type:"f",value:[]},age:{type:"f",value:[]},size:{type:"f",value:[]},sizeEnd:{type:"f",value:[]},customColor:{type:"c",value:[]},customColorEnd:{type:"c",value:[]},opacity:{type:"f",value:[]},opacityEnd:{type:"f",value:[]}},this.emitters=[],this.geometry=new THREE.Geometry,this.material=new THREE.ShaderMaterial({uniforms:this.uniforms,attributes:this.attributes,vertexShader:ShaderParticleGroup.shaders.vertex,fragmentShader:ShaderParticleGroup.shaders.fragment,blending:THREE.AdditiveBlending,transparent:this.transparent,alphaTest:this.alphaTest,depthWrite:this.depthWrite,depthTest:this.depthTest}),this.mesh=new THREE.ParticleSystem(this.geometry,this.material),this.mesh.dynamic=!0}function ShaderParticleEmitter(a){a=a||{};var b=this;b.particlesPerSecond="number"==typeof a.particlesPerSecond?a.particlesPerSecond:100,b.type="cube"===a.type||"sphere"===a.type?a.type:"cube",b.position=a.position instanceof THREE.Vector3?a.position:new THREE.Vector3,b.positionSpread=a.positionSpread instanceof THREE.Vector3?a.positionSpread:new THREE.Vector3,b.radius="number"==typeof a.radius?a.radius:10,b.radiusScale=a.radiusScale instanceof THREE.Vector3?a.radiusScale:new THREE.Vector3(1,1,1),b.acceleration=a.acceleration instanceof THREE.Vector3?a.acceleration:new THREE.Vector3,b.accelerationSpread=a.accelerationSpread instanceof THREE.Vector3?a.accelerationSpread:new THREE.Vector3,b.velocity=a.velocity instanceof THREE.Vector3?a.velocity:new THREE.Vector3,b.velocitySpread=a.velocitySpread instanceof THREE.Vector3?a.velocitySpread:new THREE.Vector3,b.speed=parseFloat("number"==typeof a.speed?a.speed:0,10),b.speedSpread=parseFloat("number"==typeof a.speedSpread?a.speedSpread:0,10),b.size=parseFloat("number"==typeof a.size?a.size:10,10),b.sizeSpread=parseFloat("number"==typeof a.sizeSpread?a.sizeSpread:0,10),b.sizeEnd=parseFloat("number"==typeof a.sizeEnd?a.sizeEnd:10,10),b.colorStart=a.colorStart instanceof THREE.Color?a.colorStart:new THREE.Color("white"),b.colorEnd=a.colorEnd instanceof THREE.Color?a.colorEnd:new THREE.Color("blue"),b.colorSpread=a.colorSpread instanceof THREE.Vector3?a.colorSpread:new THREE.Vector3,b.opacityStart=parseFloat("undefined"!=typeof a.opacityStart?a.opacityStart:1,10),b.opacityEnd=parseFloat("number"==typeof a.opacityEnd?a.opacityEnd:0,10),b.emitterDuration="number"==typeof a.emitterDuration?a.emitterDuration:null,b.alive=parseInt("number"==typeof a.alive?a.alive:1,10),b.numParticles=0,b.attributes=null,b.vertices=null,b.verticesIndex=0,b.age=0,b.maxAge=0,b.particleIndex=0,b.userData={}}ShaderParticleGroup.prototype={_randomVector3:function(a,b){var c=new THREE.Vector3;return c.copy(a),c.x+=Math.random()*b.x-b.x/2,c.y+=Math.random()*b.y-b.y/2,c.z+=Math.random()*b.z-b.z/2,c},_randomColor:function(a,b){var c=new THREE.Color;return c.copy(a),c.r+=Math.random()*b.x-b.x/2,c.g+=Math.random()*b.y-b.y/2,c.b+=Math.random()*b.z-b.z/2,c.r=Math.min(c.r,255),c.g=Math.min(c.g,255),c.b=Math.min(c.b,255),c},_randomFloat:function(a,b){return a+b*(Math.random()-.5)},_randomVector3OnSphere:function(a,b,c){var d=2*Math.random()-1,e=6.2832*Math.random(),f=Math.sqrt(1-d*d),g=new THREE.Vector3(f*Math.cos(e),f*Math.sin(e),d);return g.multiplyScalar(b).add(a),c&&g.multiply(c),g},_randomVelocityVector3OnSphere:function(a,b,c,d,e){var f=(new THREE.Vector3).subVectors(a,b);return f.normalize().multiplyScalar(this._randomFloat(c,d)),e&&f.multiply(e),f},_randomizeExistingVector3:function(a,b,c){a.set(Math.random()*b.x-c.x,Math.random()*b.y-c.y,Math.random()*b.z-c.z)},addEmitter:function(a){a.numParticles=a.duration?0|a.particlesPerSecond*(this.maxAge<a.emitterDuration?this.maxAge:a.emitterDuration):0|a.particlesPerSecond*this.maxAge,a.numParticles=Math.ceil(a.numParticles);var b=this.geometry.vertices,c=b.length,d=a.numParticles+c,e=this.attributes,f=e.acceleration.value,g=e.velocity.value,h=e.alive.value,i=e.age.value,j=e.size.value,k=e.sizeEnd.value,l=e.customColor.value,m=e.customColorEnd.value,n=e.opacity.value,o=e.opacityEnd.value;a.particleIndex=parseFloat(c,10);for(var p=c;d>p;++p)"sphere"===a.type?(b[p]=this._randomVector3OnSphere(a.position,a.radius,a.radiusScale),g[p]=this._randomVelocityVector3OnSphere(b[p],a.position,a.speed,a.speedSpread,a.radiusScale,a.radius)):(b[p]=this._randomVector3(a.position,a.positionSpread),g[p]=this._randomVector3(a.velocity,a.velocitySpread)),f[p]=this._randomVector3(a.acceleration,a.accelerationSpread),j[p]=this._randomFloat(a.size,a.sizeSpread),k[p]=a.sizeEnd,i[p]=0,h[p]=0,l[p]=this._randomColor(a.colorStart,a.colorSpread),m[p]=a.colorEnd,n[p]=a.opacityStart,o[p]=a.opacityEnd;a.verticesIndex=parseFloat(c),a.attributes=this.attributes,a.vertices=this.geometry.vertices,a.maxAge=this.maxAge,this.emitters.push(a)},_flagUpdate:function(){this.attributes.age.needsUpdate=!0,this.attributes.alive.needsUpdate=!0,this.geometry.verticesNeedUpdate=!0},tick:function(a){a=a||this.fixedTimeStep;for(var b=0;b<this.emitters.length;++b)this.emitters[b].tick(a);this._flagUpdate()}},ShaderParticleGroup.shaders={vertex:["uniform float duration;","uniform int hasPerspective;","attribute vec3 customColor;","attribute vec3 customColorEnd;","attribute float opacity;","attribute float opacityEnd;","attribute vec3 acceleration;","attribute vec3 velocity;","attribute float alive;","attribute float age;","attribute float size;","attribute float sizeEnd;","varying vec4 vColor;","float Lerp( float start, float end ) {","return (start + ((end - start) * (age / duration)));","}","vec3 Lerp( vec3 start, vec3 end ) {","return (start + ((end - start) * (age / duration)));","}","vec4 GetPos() {","vec3 newPos = vec3( position );","vec3 a = acceleration * age;","vec3 v = velocity * age;","v = v + (a * age);","newPos = newPos + v;","vec4 mvPosition = modelViewMatrix * vec4( newPos, 1.0 );","return mvPosition;","}","void main() {","if( alive > 0.5 ) {","vec3 color = vec3( customColor );","if( customColor != customColorEnd ) {","color = Lerp( customColor, customColorEnd );","}","if( opacity != opacityEnd ) {","vColor = vec4( color, Lerp( opacity, opacityEnd ) );","}","else {","vColor = vec4( color, opacity );","}","vec4 pos = GetPos();","float pointSize = Lerp( size, sizeEnd );","if( hasPerspective == 1 ) {","pointSize = pointSize * ( 300.0 / length( pos.xyz ) );","}","gl_PointSize = pointSize;","gl_Position = projectionMatrix * pos;","}","else {","vColor = vec4( customColor, 0.0 );","gl_Position = vec4(1e20, 1e20, 1e20, 0);","}","}"].join("\n"),fragment:["uniform sampler2D texture;","uniform int colorize;","varying vec4 vColor;","void main() {","float c = cos(0.0);","float s = sin(0.0);","vec2 rotatedUV = vec2(c * (gl_PointCoord.x - 0.5) + s * (gl_PointCoord.y - 0.5) + 0.5,","c * (gl_PointCoord.y - 0.5) - s * (gl_PointCoord.x - 0.5) + 0.5);","vec4 rotatedTexture = texture2D( texture,  rotatedUV );","if( colorize == 1 ) {","gl_FragColor = vColor * rotatedTexture;","}","else {","gl_FragColor = rotatedTexture;","}","}"].join("\n")},ShaderParticleEmitter.prototype={_resetParticle:function(a){var b=this.positionSpread,c=this.type;"cube"===c&&0===b.x&&0===b.y&&0===b.z||"sphere"===c&&0===this.radius?a.copy(this.position):"cube"===c?this._randomizeExistingVector3(a,this.position,b):"sphere"===c&&this._randomizeExistingVector3OnSphere(a,this.position,this.radius)},_randomizeExistingVector3:function(a,b,c){var d=Math.random;a.copy(b),a.x+=d()*c.x-c.x/2,a.y+=d()*c.y-c.y/2,a.z+=d()*c.z-c.z/2},_randomizeExistingVector3OnSphere:function(a,b,c){var d=Math.random,e=2*d()-1,f=6.2832*d(),g=Math.sqrt(1-e*e),h=g*Math.cos(f)*c+b.x,i=g*Math.sin(f)*c+b.y,e=e*c+b.z;a.set(h,i,e).multiply(this.radiusScale)},tick:function(a){for(var b=this.attributes,c=b.alive.value,d=b.age.value,e=this.verticesIndex,f=this.numParticles,g=e+f,h=this.particlesPerSecond,i=h*a,j=this.maxAge,k=this.age,l=this.emitterDuration,m=this.particleIndex,n=e;g>n;++n)0!==c[n]&&(0===d[n]&&this._resetParticle(this.vertices[n]),1===c[n]&&(d[n]+=a),d[n]>=j&&(d[n]=0,c[n]=0));if(0===this.alive)return this.age=0,void 0;if("number"==typeof l&&k>l)return this.alive=0,this.age=0,void 0;var o=Math.min(g,m+i);for(n=0|m;o>n;++n)c[n]=1,this._resetParticle(this.vertices[n]);this.particleIndex+=i,m>=e+this.numParticles&&(this.particleIndex=parseFloat(e,10)),this.age+=a}};